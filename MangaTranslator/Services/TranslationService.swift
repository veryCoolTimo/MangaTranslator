import Foundation

actor TranslationService {
    private let apiKey: String
    private let baseURL = URL(string: "https://api.openai.com/v1/chat/completions")!
    
    init() throws {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if let envApiKey = ProcessInfo.processInfo.environment["OPENAI_API_KEY"] {
            print("API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            self.apiKey = envApiKey
        } else if let fileApiKey = try? Self.readAPIKeyFromEnvFile() {
            print("API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            self.apiKey = fileApiKey
        } else {
            print("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            throw TranslationError.missingAPIKey
        }
    }
    
    private static func readAPIKeyFromEnvFile() throws -> String? {
        print("–ò—â—É —Ñ–∞–π–ª .env –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É .env –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        guard let envPath = Bundle.main.path(forResource: ".env", ofType: nil) else {
            print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            return nil
        }
        
        print("‚úÖ –ù–∞–π–¥–µ–Ω .env —Ñ–∞–π–ª –≤: \(envPath)")
        
        do {
            let content = try String(contentsOfFile: envPath, encoding: .utf8)
            print("üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
            print(content)
            
            let lines = content.components(separatedBy: .newlines)
            for line in lines {
                let parts = line.split(separator: "=", maxSplits: 1).map(String.init)
                if parts.count == 2 && parts[0].trimmingCharacters(in: .whitespaces) == "OPENAI_API_KEY" {
                    let key = parts[1].trimmingCharacters(in: .whitespaces)
                    print("üîë –ù–∞–π–¥–µ–Ω –∫–ª—é—á API –≤ —Ñ–∞–π–ª–µ")
                    return key
                }
            }
            print("‚ùå –ö–ª—é—á API –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: \(error)")
        }
        
        return nil
    }
    
    func translate(_ text: String, from sourceLanguage: String, to targetLanguage: String) async throws -> Translation {
        let prompt = """
        –ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –º–∞–Ω—Ö–≤—ã —Å –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ –Ω–∞ \(targetLanguage).
        –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å –∏ —Ç–æ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, —É—á–∏—Ç—ã–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ—Ä–µ–π—Å–∫–æ–π –º–∞–Ω—Ö–≤—ã.
        –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∑–≤—É—á–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π —Ä–µ—á–∏.
        –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è –∏ –∑–≤—É–∫–æ–ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å—Ç–∏–ª–µ.
        
        –¢–µ–∫—Å—Ç: \(text)
        
        –Ω–µ –ø–∏—à–∏ "–ø–µ—Ä–µ–≤–æ–¥"
        """
        
        let messages: [[String: String]] = [
            ["role": "system", "content": """
            –¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∫–æ—Ä–µ–π—Å–∫–æ–π –º–∞–Ω—Ö–≤—ã.
            –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∑–≤—É—á–∞—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã, —Å–æ—Ö—Ä–∞–Ω—è—è:
            - –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å
            - –ö–æ—Ä–µ–π—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
            - –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –∑–≤—É–∫–æ–ø–æ–¥—Ä–∞–∂–∞–Ω–∏–π –∏ –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–π
            - –ö—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≥–¥–µ —ç—Ç–æ –≤–∞–∂–Ω–æ
            """],
            ["role": "user", "content": prompt]
        ]
        
        let requestBody: [String: Any] = [
            "model": "gpt-4o-mini", // –Ω–µ –º–µ–Ω—è–π —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä 
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 150
        ]
        
        var request = URLRequest(url: baseURL)
        request.httpMethod = "POST"
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try JSONSerialization.data(withJSONObject: requestBody)
        
        let (data, response) = try await URLSession.shared.data(for: request)
        
        guard let httpResponse = response as? HTTPURLResponse else {
            throw TranslationError.invalidResponse
        }
        
        guard httpResponse.statusCode == 200 else {
            throw TranslationError.apiError("HTTP \(httpResponse.statusCode)")
        }
        
        guard let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
              let choices = json["choices"] as? [[String: Any]],
              let firstChoice = choices.first,
              let message = firstChoice["message"] as? [String: Any],
              let translatedText = message["content"] as? String else {
            throw TranslationError.invalidResponse
        }
        
        return Translation(
            originalText: text,
            translatedText: translatedText.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines),
            confidence: 0.9
        )
    }
    
    func translateBatch(_ texts: [String], from sourceLanguage: String, to targetLanguage: String) async throws -> [Translation] {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        return try await withThrowingTaskGroup(of: Translation.self) { group in
            for text in texts {
                group.addTask {
                    try await self.translate(text, from: sourceLanguage, to: targetLanguage)
                }
            }
            
            var translations: [Translation] = []
            for try await translation in group {
                translations.append(translation)
            }
            return translations
        }
    }
}

enum TranslationError: LocalizedError {
    case missingAPIKey
    case invalidResponse
    case apiError(String)
    
    var errorDescription: String? {
        switch self {
        case .missingAPIKey:
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á OpenAI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ —Ñ–∞–π–ª .env –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY"
        case .invalidResponse:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API"
        case .apiError(let message):
            return "–û—à–∏–±–∫–∞ API: \(message)"
        }
    }
} 