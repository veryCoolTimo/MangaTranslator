import Foundation
import Vision
import CoreImage
import AppKit
import SwiftUI

// MARK: - Image Processing Service

actor ImageProcessingService {
    private let inpaintingService: InpaintingService
    private let translationService: TranslationService
    
    init() async throws {
        self.inpaintingService = InpaintingService()
        self.translationService = try await TranslationService()
    }
    
    // MARK: - Text Recognition
    
    func recognizeText(in wrapper: ImageWrapper) async throws -> [TextRegion] {
        guard let cgImage = await wrapper.image.cgImage(forProposedRect: nil, context: nil, hints: nil) else {
            throw ImageProcessingError.invalidImage
        }
        
        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        let ciImage = CIImage(cgImage: cgImage)
        let context = CIContext()
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –∏ —á–µ—Ç–∫–æ—Å—Ç–∏
        let filters = [
            "CIColorControls": [
                kCIInputContrastKey: 1.1,
                kCIInputBrightnessKey: 0.0,
                kCIInputSaturationKey: 0.0
            ],
            "CIUnsharpMask": [
                kCIInputRadiusKey: 1.0,
                kCIInputIntensityKey: 0.5
            ]
        ]
        
        var processedImage = ciImage
        for (filterName, params) in filters {
            guard let filter = CIFilter(name: filterName) else { continue }
            filter.setDefaults()
            filter.setValue(processedImage, forKey: kCIInputImageKey)
            
            for (key, value) in params {
                filter.setValue(value, forKey: key)
            }
            
            if let outputImage = filter.outputImage {
                processedImage = outputImage
            }
        }
        
        guard let processedCGImage = context.createCGImage(processedImage, from: processedImage.extent) else {
            throw ImageProcessingError.processingFailed("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        let requestHandler = VNImageRequestHandler(cgImage: processedCGImage, options: [:])
        let request = VNRecognizeTextRequest()
        request.recognitionLanguages = ["ko", "ja"]  // –î–æ–±–∞–≤–ª—è–µ–º —è–ø–æ–Ω—Å–∫–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤
        request.recognitionLevel = .accurate
        request.usesLanguageCorrection = false
        request.customWords = ["„ÅÆ", "„ÅØ", "„Åå", "„Çí", "„Å´", "„Å∏", "„Åß", "„Å®", "„ÇÇ", "„ÇÑ"]  // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—ã–µ —è–ø–æ–Ω—Å–∫–∏–µ —á–∞—Å—Ç–∏—Ü—ã
        request.minimumTextHeight = 0.01  // –£–º–µ–Ω—å—à–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–∞
        
        return try await withCheckedThrowingContinuation { continuation in
            do {
                try requestHandler.perform([request])
                guard let observations = request.results else {
                    continuation.resume(returning: [])
                    return
                }
                
                let imageSize = CGSize(width: cgImage.width, height: cgImage.height)
                var regions: [TextRegion] = []
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –±–ª–∏–∑–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã
                let sortedObservations = observations.sorted { $0.boundingBox.origin.y > $1.boundingBox.origin.y }
                
                for observation in sortedObservations {
                    guard let recognizedText = observation.topCandidates(1).first?.string,
                          !recognizedText.trimmingCharacters(in: .whitespaces).isEmpty else {
                        continue
                    }
                    
                    let boundingBox = observation.boundingBox
                    let rect = CGRect(
                        x: boundingBox.origin.x * imageSize.width,
                        y: boundingBox.origin.y * imageSize.height,
                        width: boundingBox.width * imageSize.width,
                        height: boundingBox.height * imageSize.height
                    )
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–µ–≥–∏–æ–Ω–æ–º
                    if let lastRegion = regions.last,
                       abs(lastRegion.rect.midY - rect.midY) < rect.height * 0.5 &&
                       abs(lastRegion.rect.maxX - rect.minX) < rect.width * 2.0 {
                        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã
                        let unionRect = lastRegion.rect.union(rect)
                        let combinedText = lastRegion.originalText + " " + recognizedText
                        regions[regions.count - 1] = TextRegion(
                            rect: unionRect,
                            originalText: combinedText,
                            translatedText: nil
                        )
                    } else {
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω
                        regions.append(TextRegion(
                            rect: rect,
                            originalText: recognizedText,
                            translatedText: nil
                        ))
                    }
                }
                
                continuation.resume(returning: regions)
            } catch {
                continuation.resume(throwing: error)
            }
        }
    }
    
    // MARK: - Translation
    
    func translateRegions(_ regions: [TextRegion], to targetLanguage: String) async throws -> [TextRegion] {
        let texts = regions.map { region in region.originalText }
        let translations = try await translationService.translateBatch(texts, from: "Korean", to: targetLanguage)
        
        return regions.enumerated().map { index, region in
            var newRegion = region
            newRegion.translatedText = translations[index].translatedText
            return newRegion
        }
    }
    
    // MARK: - Image Inpainting
    
    func inpaintTextRegions(wrapper: ImageWrapper, regions: [TextRegion]) async throws -> ImageWrapper {
        guard let cgImage = await wrapper.image.cgImage(forProposedRect: nil, context: nil, hints: nil) else {
            throw ImageProcessingError.invalidImage
        }
        
        let size = NSSize(width: cgImage.width, height: cgImage.height)
        let resultImage = NSImage(size: size)
        
        await resultImage.lockFocus()
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await wrapper.image.draw(in: NSRect(origin: .zero, size: size))
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        guard let context = NSGraphicsContext.current?.cgContext else {
            throw ImageProcessingError.processingFailed("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏—è")
        }
        
        for region in regions {
            print("üé® –ó–∞–ª–∏–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏: x=\(region.rect.origin.x), y=\(region.rect.origin.y), width=\(region.rect.width), height=\(region.rect.height)")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.saveGState()
            
            // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
            context.addRect(region.rect)
            context.clip()
            
            // –ó–∞–ª–∏–≤–∞–µ–º –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º
            context.setFillColor(NSColor.white.cgColor)
            context.fill(region.rect)
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.restoreGState()
        }
        
        await resultImage.unlockFocus()
        return await ImageWrapper.wrap(resultImage)
    }
    
    private func getBackgroundBrightness(for textRect: CGRect, around expandedRect: CGRect, in image: NSImage) async -> CGFloat {
        guard let cgImage = await image.cgImage(forProposedRect: nil, context: nil, hints: nil) else { return 0.5 }
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–∞
        let colorSpace = CGColorSpaceCreateDeviceRGB()
        let bitmapInfo = CGImageAlphaInfo.premultipliedLast.rawValue
        guard let context = CGContext(data: nil,
                                    width: Int(expandedRect.width),
                                    height: Int(expandedRect.height),
                                    bitsPerComponent: 8,
                                    bytesPerRow: 0,
                                    space: colorSpace,
                                    bitmapInfo: bitmapInfo) else { return 0.5 }
        
        // –†–∏—Å—É–µ–º —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        let drawRect = CGRect(origin: .zero, size: expandedRect.size)
        context.draw(cgImage, in: drawRect)
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª–∏
        guard let data = context.data else { return 0.5 }
        let pointer = data.bindMemory(to: UInt8.self, capacity: Int(expandedRect.width * expandedRect.height * 4))
        
        var sumR: Int = 0, sumG: Int = 0, sumB: Int = 0, count: Int = 0
        let bytesPerRow = context.bytesPerRow
        let bytesPerPixel = 4
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
        for y in 0..<Int(textRect.height) {
            for x in 0..<Int(textRect.width) {
                let offset = y * bytesPerRow + x * bytesPerPixel
                sumR += Int(pointer[offset])
                sumG += Int(pointer[offset + 1])
                sumB += Int(pointer[offset + 2])
                count += 1
            }
        }
        
        guard count > 0 else { return 0.5 }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ü–≤–µ—Ç
        let avgR = CGFloat(sumR) / CGFloat(count) / 255.0
        let avgG = CGFloat(sumG) / CGFloat(count) / 255.0
        let avgB = CGFloat(sumB) / CGFloat(count) / 255.0
        
        // –í—ã—á–∏—Å–ª—è–µ–º —è—Ä–∫–æ—Å—Ç—å (–∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —è—Ä–∫–æ—Å—Ç–∏)
        let brightness = (0.299 * avgR + 0.587 * avgG + 0.114 * avgB)
        
        print("üé® –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞: —è—Ä–∫–æ—Å—Ç—å = \(brightness)")
        return brightness
    }
    
    // MARK: - Text Overlay
    
    func overlayTranslatedText(wrapper: ImageWrapper, regions: [TextRegion], targetLanguage: String) async throws -> ImageWrapper {
        guard let cgImage = await wrapper.image.cgImage(forProposedRect: nil, context: nil, hints: nil) else {
            throw ImageProcessingError.invalidImage
        }
        
        let size = NSSize(width: cgImage.width, height: cgImage.height)
        let resultImage = NSImage(size: size)
        
        await resultImage.lockFocus()
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await wrapper.image.draw(in: NSRect(origin: .zero, size: size))
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        guard let context = NSGraphicsContext.current?.cgContext else {
            throw ImageProcessingError.processingFailed("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏—è")
        }
        
        for region in regions {
            guard let translatedText = region.translatedText else { continue }
            
            print("üìù –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏: x=\(region.rect.origin.x), y=\(region.rect.origin.y), width=\(region.rect.width), height=\(region.rect.height)")
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
            let expandedRect = region.rect.insetBy(dx: -5, dy: -5)
            let brightness = await getBackgroundBrightness(for: region.rect, around: expandedRect, in: wrapper.image)
            
            // –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è—Ä–∫–æ—Å—Ç–∏ —Ñ–æ–Ω–∞
            let (textColor, strokeColor) = brightness > 0.5 
                ? (NSColor.black, NSColor.white)  // –î–ª—è —Å–≤–µ—Ç–ª–æ–≥–æ —Ñ–æ–Ω–∞
                : (NSColor.white, NSColor.black)  // –î–ª—è —Ç–µ–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞
            
            print("üìù –Ø—Ä–∫–æ—Å—Ç—å —Ñ–æ–Ω–∞: \(brightness), –≤—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: \(brightness > 0.5 ? "—á–µ—Ä–Ω—ã–π" : "–±–µ–ª—ã–π")")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.saveGState()
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å—Ç–∏–ª—å –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏
            let maxWidth = region.rect.width * 2.0  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
            let maxHeight = region.rect.height * 1.5  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
            let fontSize = min(region.rect.height * 0.8, region.rect.width * 0.2)  // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            
            // –°–æ–∑–¥–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            let attributes: [NSAttributedString.Key: Any] = [
                .font: NSFont.boldSystemFont(ofSize: fontSize),
                .foregroundColor: textColor,
                .strokeColor: strokeColor,
                .strokeWidth: -2.0,
                .paragraphStyle: paragraphStyle
            ]
            
            // –°–æ–∑–¥–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
            let attributedString = NSAttributedString(string: translatedText, attributes: attributes)
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            let textSize = attributedString.size()
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–±–ª–∞—Å—Ç–∏
            let verticalOffset = max(region.rect.height * 1.5, 50.0)  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø 50 –ø–∏–∫—Å–µ–ª–µ–π
            let horizontalOffset = region.rect.width * 0.3  // –°–º–µ—â–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ –Ω–∞ 30% —à–∏—Ä–∏–Ω—ã
            
            let x = region.rect.origin.x + horizontalOffset
            let y = size.height - region.rect.origin.y + verticalOffset
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
            let textRect = NSRect(
                x: x,
                y: y,
                width: maxWidth,
                height: maxHeight
            )
            
            // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ
            attributedString.draw(in: textRect)
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.restoreGState()
        }
        
        await resultImage.unlockFocus()
        return await ImageWrapper.wrap(resultImage)
    }
}

// MARK: - Errors

enum ImageProcessingError: LocalizedError {
    case invalidImage
    case processingFailed(String)
    
    var errorDescription: String? {
        switch self {
        case .invalidImage:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        case .processingFailed(let message):
            return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: \(message)"
        }
    }
} 